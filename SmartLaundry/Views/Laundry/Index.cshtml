@model SmartLaundry.Models.LaundryViewModels.IndexViewModel
@{
    ViewData["Title"] = "Index";
}

<h2>Laundries</h2>

<form method="POST" asp-action="AddLaundry">
    <input type="number" name="laundryPosition" min="1" max="100" />
    <input type="hidden" name="dormitoryId" value="@Model.DormitoryId" />
    <input type="submit" value="Add laundry" />
</form>

@foreach (var laundry in Model.Laundries)
{
    var washingMachines = laundry.WashingMachines.OrderBy(x => x.Position).ToList();

    <form method="post" asp-action="DeleteLaundry">
        <input type="hidden" name="id" value="@laundry.Id" />
        <input type="submit" value="Remove laundry" />
    </form>
    <form method="post" asp-action="AddWashingMachine">
        <input type="hidden" name="id" value="@laundry.Id" />
        <input type="number" name="machinePosition" min="1" max="100" />
        <input type="submit" value="Add washing machine" />
    </form>
    <form method="post" asp-action="ChangeShifts">
        <input type="hidden" name="laundryId" value="@laundry.Id" />
        <input type="time" name="startTime" min="00:00" max="23:00" value="@laundry.startTime.Hours.ToString("00"):@laundry.startTime.Minutes.ToString("00")" />
        <input type="time" name="shiftTime" min="01:00" max="03:00" value="@laundry.shiftTime.Hours.ToString("00"):@laundry.shiftTime.Minutes.ToString("00")" />
        <input type="number" name="shiftCount" min="1" max="24" value="@laundry.shiftCount" />
        <input type="submit" value="Change shifts" />
    </form>
    <table class="table">
        <thead>
            <tr>
                <th>
                    Laundry @laundry.Position
                </th>
                @foreach (var item in washingMachines)
                {
                    <th>
                        @item.Position

                        <form method="POST" asp-action="RemoveWashingMachine">
                            <input type="hidden" name="machineId" value="@item.Id" />
                            <input type="submit" value="Remove washing machine" />
                        </form>

                        @if (Model.isCurrentlyFault(item.Id))
                        {
                            <form method="POST" asp-action="EnableWashingMachine">
                                <input type="hidden" name="machineId" value="@item.Id" />
                                <input type="submit" value="Enable washing machine" />
                            </form>
                        }
                        else
                        {
                            <form method="POST" asp-action="DisableWashingMachine">
                                <input type="hidden" name="machineId" value="@item.Id" />
                                <input type="submit" value="Disable washing machine" />
                            </form>
                        }
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @for (int shit = 0; shit < laundry.shiftCount; shit++)
            {
                TimeSpan startTime = laundry.startTime + laundry.shiftTime * shit;
                TimeSpan endTime = laundry.startTime + laundry.shiftTime * (shit + 1);
                <tr>
                    <td>
                        @startTime.Hours.ToString("00"):@startTime.Minutes.ToString("00") - @endTime.Hours.ToString("00"):@endTime.Minutes.ToString("00")
                    </td>
                    @foreach (var item in washingMachines)
                    {
                        <td>
                            @{
                                var reservation = item.Reservations
                                    .Where(x => x.StartTime.Date == DateTime.Today
                                        && x.StartTime.Hour == @startTime.Hours
                                        && x.StartTime.Minute == @startTime.Minutes
                                        && x.Fault == false && x.ToRenew == false)
                                    .SingleOrDefault();
                                var reservationToConfirm = item.Reservations
                                    .Where(x => x.StartTime.Date == DateTime.Today
                                        && x.StartTime.Hour == @startTime.Hours
                                        && x.StartTime.Minute == @startTime.Minutes
                                        && x.Fault == false
                                        && x.ToRenew == true
                                        && x.Confirmed == false
                                        && (x.StartTime - DateTime.Now).TotalMinutes > 15)
                                    .SingleOrDefault();
                            }
                            @if (reservation != null)
                            {
                                <b>@reservation.Room.Number</b>
                            }
                            @if (Model.isFaultAtTimeToday(item.Id, startTime))
                            {
                                <b>FAULT</b>
                            }
                            else if (DateTime.Now.Subtract(DateTime.Now.Date) < startTime)
                            {
                                if (reservationToConfirm != null)
                                {
                                    <b>@reservationToConfirm.Room.Number - to confirm</b>
                                    if (Model.currentRoomReservation == reservationToConfirm)
                                    {
                                        <form method="POST" asp-action="ConfirmReservation">
                                            <input type="hidden" name="reservationId" value="@reservationToConfirm.Id" />
                                            <input type="submit" value="Confirm reservation" />
                                        </form>
                                    }
                                }
                                else
                                {
                                    if (reservation == Model.currentRoomReservation && reservation != null)
                                    {
                                        <form method="POST" asp-action="CancelReservation">
                                            <input type="hidden" name="reservationId" value="@reservation.Id" />
                                            <input type="submit" value="Cancel reservation" />
                                        </form>
                                    }
                                    else if ((Model.currentRoomReservation == null || !Model.currentRoomReservation.Confirmed)
                                        && reservation == null)
                                    {
                                        <form method="POST" asp-action="Reserve">
                                            <input type="hidden" name="hour" value="@startTime" />
                                            <input type="hidden" name="machineId" value="@item.Id" />
                                            <input type="submit" value="Reserve" />
                                        </form>
                                    }
                                }
                            }

                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}