@using System.Security.Cryptography.X509Certificates
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService

@model SmartLaundry.Models.LaundryViewModels.DayViewModel

<div class="row">
    <div class="col-md-12 col-centered">
        <div class="form-box">
            <div class="form-top-simple">
                <div class="form-top-full">
                    <h3>
                        <b>Laundries - @Model.date.ToShortDateString()</b>
                    </h3>
                </div>
            </div>
            <div class="form-bottom">

                @if(Model.date.Date == DateTime.Today.Date)
                {
                    if(Model.hasReservationToRenew)
                    {
                        <h2 class="text-danger">
                            You can make reservation for the next day duo to washing machine failure.
                        </h2>
                    }
                    if(Model.hasReservationToRenew || (await AuthorizationService.AuthorizeAsync(User, "MinimumPorter")).Succeeded)
                    {
                        <a asp-action="Day" asp-controller="Laundry" asp-route-id="@Model.DormitoryId"
                           asp-route-year="@DateTime.Today.AddDays(1).Year" asp-route-month="@DateTime.Today.AddDays(1).Month"
                           asp-route-day="@DateTime.Today.AddDays(1).Day">
                            Go to the tomorrow's reservations.
                        </a>
                    }
                }
                else
                {
                    <a asp-action="Day" asp-controller="Laundry" asp-route-id="@Model.DormitoryId"
                       asp-route-year="@DateTime.Today.Date.Year" asp-route-month="@DateTime.Today.Date.Month"
                       asp-route-day="@DateTime.Today.Date.Day">
                        Go to the todays's reservations.
                    </a>
                }

                @if((await AuthorizationService.AuthorizeAsync(User, "MinimumManager")).Succeeded)
                {
                    var firstFreeLaundryNumber = 1;
                    for(var i = 1; i < 100; i++)
                    {
                        if(Model.Laundries.All(x => x.Position != i))
                        {
                            firstFreeLaundryNumber = i;
                            break;
                        }
                    }

                    if(Model.LaundryToAdd == null)
                    {
                        Model.LaundryToAdd = new Laundry()
                        {
                            DormitoryId = Model.DormitoryId,
                            shiftCount = 4,
                            shiftTime = new TimeSpan(2, 0, 0),
                            startTime = new TimeSpan(15, 0, 0),
                            Position = firstFreeLaundryNumber
                        };
                    }

                    if(!string.IsNullOrEmpty(Model.AddLaundryError))
                    {
                        <p class="text-danger">
                            @Model.AddLaundryError
                            @Html.ValidationSummary()
                        </p>
                    }
                    <hr />
                    <form asp-action="AddLaundry" asp-controller="Laundry" method="post" class="form-group-border">
                        @Html.AntiForgeryToken()
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <input type="hidden" asp-for="LaundryToAdd.DormitoryId" />
                        <div class="form-group">
                            <label asp-for="LaundryToAdd.Position" class="control-label"></label>
                            <input asp-for="LaundryToAdd.Position" class="form-control" />
                            <span asp-validation-for="LaundryToAdd.Position" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="LaundryToAdd.startTime" class="control-label"></label>
                            <input asp-for="LaundryToAdd.startTime" class="form-control" />
                            <span asp-validation-for="LaundryToAdd.startTime" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="LaundryToAdd.shiftTime" class="control-label"></label>
                            <input asp-for="LaundryToAdd.shiftTime" class="form-control" />
                            <span asp-validation-for="LaundryToAdd.shiftTime" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="LaundryToAdd.shiftCount" class="control-label"></label>
                            <input asp-for="LaundryToAdd.shiftCount" class="form-control" />
                            <span asp-validation-for="LaundryToAdd.shiftCount" class="text-danger"></span>
                        </div>
                        <button type="submit" class="btn btn-success">Add laundry</button>
                    </form>

                }

                <hr />

                @foreach(var laundry in Model.Laundries)
                {
                    var washingMachines = laundry.WashingMachines.OrderBy(x => x.Position).ToList();

                    <div class="form-group-border">

                        <h3><b>Laundry @laundry.Position</b></h3>

                        @if((await AuthorizationService.AuthorizeAsync(User, "MinimumManager")).Succeeded)
                        {
                            <form method="post" asp-action="DeleteLaundry" asp-controller="Laundry" class="form-button">
                                <input type="hidden" name="id" value="@laundry.Id" />
                                <button type="submit" class="btn btn-danger">Remove laundry</button>
                            </form>

                            var newMachine = new WashingMachine();
                            for(int i = 1; i < 100; i++)
                            {
                                if(laundry.WashingMachines.All(x => x.Position != i && x.LaundryId == laundry.Id))
                                {
                                    newMachine.Position = i;
                                    newMachine.LaundryId = laundry.Id;
                                    break;
                                }
                            }



                            if(!string.IsNullOrEmpty(Model.AddWashingMachineError))
                            {
                                <p class="text-danger">@Model.AddWashingMachineError</p>

                            }

                            @await Html.PartialAsync("_addWashingMachinePartial", newMachine)

                            <hr />
                        }
                        <div class="form-group-border">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>

                                        </th>
                                        @foreach(var item in washingMachines)
                                        {
                                            <th>
                                                Washing machine @item.Position
                                                @if((await AuthorizationService.AuthorizeAsync(User, "MinimumManager")).Succeeded)
                                                {
                                                    <form method="POST" asp-action="RemoveWashingMachine" asp-controller="Laundry" class="form-button-small">
                                                        <input type="hidden" name="machineId" value="@item.Id" />
                                                        <button type="submit" class="btn btn-danger">Remove washing machine</button>
                                                    </form>
                                                }
                                                @if((await AuthorizationService.AuthorizeAsync(User, "MinimumPorter")).Succeeded)
                                                {
                                                    if(Model.isCurrentlyFault(item.Id))
                                                    {
                                                        <form method="POST" asp-action="EnableWashingMachine" asp-controller="Laundry" class="form-button-small">
                                                            <input type="hidden" name="machineId" value="@item.Id" />
                                                            <button type="submit" class="btn btn-info">Enable washing machine</button>
                                                        </form>
                                                    }
                                                    else
                                                    {
                                                        <form method="POST" asp-action="DisableWashingMachine" asp-controller="Laundry" class="form-button-small">
                                                            <input type="hidden" name="machineId" value="@item.Id" />
                                                            <button type="submit" class="btn btn-warning">Disable washing machine</button>
                                                        </form>
                                                    }
                                                }
                                            </th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @for(int shift = 0; shift < laundry.shiftCount; shift++)
                                    {
                                        var startTime = Model.date.Add(laundry.startTime + laundry.shiftTime * shift);
                                        var endTime = Model.date.Add(laundry.startTime + laundry.shiftTime * (shift + 1));
                                        <tr>
                                            <td>
                                                @startTime.Hour.ToString("00"):@startTime.Minute.ToString("00") - @endTime.Hour.ToString("00"):@endTime.Minute.ToString("00")
                                            </td>
                                            @foreach(var item in washingMachines)
                                            {
                                                <td>
                                                    @{
                                                        var reservation = item.Reservations
                                                            .SingleOrDefault(x => x.StartTime == startTime
                                                                                  && x.Fault == false && x.ToRenew == false);
                                                        var reservationToConfirm = item.Reservations
                                                            .SingleOrDefault(x => x.StartTime == startTime
                                                                                  && x.Fault == false
                                                                                  && x.ToRenew
                                                                                  && x.Confirmed == false
                                                                                  && (x.StartTime - DateTime.Now).TotalMinutes > 15);
                                                    }
                                                    @if(reservation != null)
                                                    {
                                                        if(reservation.Room != null)
                                                        {
                                                            <b>@reservation.Room.Number</b>
                                                        }
                                                        else
                                                        {
                                                            <b>Personel</b>
                                                        }
                                                    }
                                                    @if(Model.IsFaultAtTime(item, startTime))
                                                    {
                                                        <b>FAULT</b>
                                                    }
                                                    else if(DateTime.Now < startTime && (await AuthorizationService.AuthorizeAsync(User, "MinimumOccupant")).Succeeded)
                                                    {
                                                        if(reservationToConfirm != null)
                                                        {
                                                            if(reservationToConfirm.Room != null)
                                                            {
                                                                <b>@reservationToConfirm.Room.Number - to confirm</b>
                                                            }
                                                            else
                                                            {
                                                                <b>Personel - to confirm</b>
                                                            }

                                                            if(Model.currentRoomReservation != null && Model.currentRoomReservation.Id == reservationToConfirm.Id
                                                               || reservationToConfirm.Room == null && (await AuthorizationService.AuthorizeAsync(User, "MinimumPorter")).Succeeded)
                                                            {
                                                                <form method="POST" asp-action="ConfirmReservation" asp-controller="Laundry" class="form-button-small">
                                                                    <input type="hidden" name="reservationId" value="@reservationToConfirm.Id" />
                                                                    <button type="submit" class="btn btn-success">Confirm reservation</button>
                                                                </form>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if(reservation != null
                                                               && ((Model.currentRoomReservation != null && reservation.Id == Model.currentRoomReservation.Id)
                                                                   || (await AuthorizationService.AuthorizeAsync(User, "MinimumPorter")).Succeeded))
                                                            {
                                                                <form method="POST" asp-action="CancelReservation" asp-controller="Laundry" class="form-button-small">
                                                                    <input type="hidden" name="reservationId" value="@reservation.Id" />
                                                                    <button type="submit" class="btn btn-danger">Cancel reservation</button>
                                                                </form>
                                                            }
                                                            else if((Model.currentRoomReservation == null || !Model.currentRoomReservation.Confirmed)
                                                                    && reservation == null
                                                                    && (Model.date == DateTime.Now.Date || Model.date == DateTime.Now.Date.AddDays(1) && Model.hasReservationToRenew
                                                                        || (await AuthorizationService.AuthorizeAsync(User, "MinimumPorter")).Succeeded))
                                                            {
                                                                <form method="POST" asp-action="Reserve" asp-controller="Laundry" class="form-button-small">
                                                                    <input type="hidden" name="startTime" value="@startTime" />
                                                                    <input type="hidden" name="machineId" value="@item.Id" />
                                                                    <button type="submit" class="btn btn-info">Reserve</button>
                                                                </form>
                                                            }
                                                        }
                                                    }

                                                </td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <hr />
                }
            </div>
        </div>
    </div>
</div>
